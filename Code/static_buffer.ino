/* Edge Impulse ingestion SDK
 * Copyright (c) 2022 EdgeImpulse Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author Name: Jiajie Hao
 * 
 */

/* Includes ---------------------------------------------------------------- */
#include <fall_detection_and_alert_system_inferencing.h>
#include <Arduino_LSM9DS1.h>

#define EI_CLASSIFIER_FREQUENCY 62.5
#define BUZZER_PIN 2  // Define the pin for the buzzer

static float features[] = {
  // copy raw features here (for example from the 'Live classification' page)
  // see https://docs.edgeimpulse.com/docs/running-your-impulse-arduino
  -7.2323, -5.2349, 4.2066, 4.0894, 2.6245, -3.6011, -18.2129, 46.0571, 8.9966, -7.2036, -5.2511, 4.1881, 4.1504, 2.4414, -3.7231, -18.2129, 46.0571, 8.9966, -7.1748, -5.2643, 4.2144, 3.5400, 2.2583, -3.8452, -18.2129, 46.0571, 8.9966, -7.1730, -5.2912, 4.1899, 3.2959, 1.8921, -4.0283, -18.2129, 46.0571, 8.9966, -7.1748, -5.2463, 4.1934, 3.4790, 1.7700, -4.1504, -18.4448, 46.3379, 8.3496, -7.1976, -5.2200, 4.2018, 3.4790, 2.3193, -4.3945, -18.4448, 46.3379, 8.3496, -7.2179, -5.2014, 4.2108, 3.7842, 2.3804, -4.3945, -18.4448, 46.3379, 8.3496, -7.2095, -5.1918, 4.2156, 3.9063, 2.6245, -4.5166, -18.7378, 46.1182, 8.0933, -7.1862, -5.1852, 4.2078, 4.0894, 2.9297, -4.6387, -18.7378, 46.1182, 8.0933, -7.1635, -5.2307, 4.2216, 3.7231, 2.9297, -4.7607, -18.7378, 46.1182, 8.0933, -7.1497, -5.2427, 4.2509, 3.4180, 2.8076, -4.7607, -18.8721, 45.9839, 8.6060, -7.1587, -5.2182, 4.2868, 3.0518, 2.8687, -4.6387, -18.8721, 45.9839, 8.6060, -7.1599, -5.1960, 4.2922, 2.8687, 2.6245, -4.5776, -18.8721, 45.9839, 8.6060, -7.1641, -5.1960, 4.2731, 2.5024, 2.5024, -4.4556, -18.8477, 45.8496, 9.5703, -7.1712, -5.1811, 4.2760, 2.1362, 2.1362, -4.3945, -18.8477, 45.8496, 9.5703, -7.2036, -5.1763, 4.2790, 2.1973, 2.0752, -4.5166, -18.8477, 45.8496, 9.5703, -7.2024, -5.1475, 4.2533, 2.5635, 1.7700, -4.2725, -19.1406, 45.3003, 9.3384, -7.2167, -5.0925, 4.2497, 3.1128, 1.3428, -4.0894, -19.1406, 45.3003, 9.3384, -7.2628, -5.0799, 4.2611, 3.2959, 0.9155, -3.9673, -19.1406, 45.3003, 9.3384, -7.2874, -5.0697, 4.2677, 3.4790, 0.9155, -4.0283, -19.1406, 45.3003, 9.3384, -7.3448, -4.9877, 4.2737, 3.7842, 0.3052, -4.0283, -19.2383, 45.1660, 9.0576, -7.3664, -4.9063, 4.2539, 4.0283, -0.1221, -3.9063, -19.2383, 45.1660, 9.0576, -7.3993, -4.9045, 4.2455, 5.0049, -0.2441, -4.0283, -19.2383, 45.1660, 9.0576, -7.4370, -4.9638, 4.2318, 5.2490, -0.4272, -4.4556, -19.2383, 45.8984, 8.8745, -7.3993, -5.0218, 4.1946, 5.2490, -0.1221, -4.9438, -19.2383, 45.8984, 8.8745, -7.4280, -5.0350, 4.2078, 4.6387, 0.1221, -5.2490, -19.2383, 45.8984, 8.8745, -7.4388, -5.0248, 4.2300, 3.7842, 0.7935, -5.6763, -19.9341, 44.7510, 9.8633, -7.4304, -4.9979, 4.2329, 3.2959, 1.2207, -5.9204, -19.9341, 44.7510, 9.8633, -7.4340, -5.0093, 4.2689, 3.1128, 1.7700, -6.1646, -19.9341, 44.7510, 9.8633, -7.4190, -5.0422, 4.2641, 3.1128, 2.3193, -6.0425, -19.4092, 44.9463, 10.1929, -7.3957, -5.0320, 4.2485, 2.4414, 2.8076, -5.8594, -19.4092, 44.9463, 10.1929, -7.3520, -5.0159, 4.2623, 2.4414, 3.2349, -5.5542, -19.4092, 44.9463, 10.1929, -7.3334, -5.0093, 4.2593, 2.1973, 3.7842, -5.6152, -19.4092, 44.9463, 10.1929, -7.3448, -5.0494, 4.2515, 2.0142, 4.2114, -5.7373, -20.1416, 44.0918, 10.6079, -7.3550, -5.0817, 4.2084, 1.8921, 4.3945, -5.3101, -20.1416, 44.0918, 10.6079, -7.3562, -5.0452, 4.2048, 1.9531, 4.8828, -5.2490, -20.1416, 44.0918, 10.6079, -7.3676, -5.0057, 4.1851, 1.8311, 4.9438, -4.9438, -20.4224, 44.4092, 9.1064, -7.3580, -4.9644, 4.1725, 1.8921, 5.5542, -4.9438, -20.4224, 44.4092, 9.1064, -7.3251, -4.9111, 4.1264, 2.1973, 5.9204, -5.1270, -20.4224, 44.4092, 9.1064, -7.3131, -4.9075, 4.1138, 2.9907, 5.6152, -5.0049, -20.6665, 44.2261, 9.9365, -7.3298, -4.9135, 4.1168, 3.2349, 5.0049, -4.8218, -20.6665, 44.2261, 9.9365, -7.3478, -4.9207, 4.1833, 3.0518, 4.3945, -4.8828, -20.6665, 44.2261, 9.9365, -7.3586, -4.9123, 4.2246, 3.2349, 4.0283, -4.9438, -20.6543, 44.1406, 9.3628, -7.3490, -4.9512, 4.2162, 3.2959, 3.7842, -4.9438, -20.6543, 44.1406, 9.3628, -7.3586, -4.9518, 4.1881, 3.1738, 3.4790, -5.0659, -20.6543, 44.1406, 9.3628, -7.3706, -4.9273, 4.1785, 2.9297, 3.4180, -5.4321, -20.8252, 44.1284, 9.7778, -7.3664, -4.8518, 4.1839, 3.4180, 3.3569, -5.3711, -20.8252, 44.1284, 9.7778, -7.3634, -4.8123, 4.2174, 3.7231, 3.2959, -5.6152, -20.8252, 44.1284, 9.7778, -7.3412, -4.8201, 4.2677, 3.4790, 3.4180, -5.6152, -20.8252, 44.1284, 9.7778, -7.3173, -4.8489, 4.3365, 3.0518, 2.9907, -5.2490, -20.7764, 43.8965, 8.7891, -7.3149, -4.8866, 4.4071, 2.6855, 2.7466, -5.0049, -20.7764, 43.8965, 8.7891, -7.3412, -4.9021, 4.4592, 2.9907, 2.4414, -4.6387, -20.7764, 43.8965, 8.7891, -7.3412, -4.8806, 4.4694, 3.6011, 1.8311, -4.4556, -20.9351, 43.7500, 11.2305, -7.3245, -4.8040, 4.4790, 4.5166, 1.2207, -4.3945, -20.9351, 43.7500, 11.2305, -7.3382, -4.7483, 4.4574, 4.9438, 0.9766, -4.2725, -20.9351, 43.7500, 11.2305, -7.3502, -4.7459, 4.4700, 4.9438, 1.0986, -4.1504, -20.8130, 43.3472, 7.6416, -7.3328, -4.7507, 4.4532, 4.8218, 1.3428, -4.1504, -20.8130, 43.3472, 7.6416, -7.3101, -4.7327, 4.4736, 4.5776, 1.5259, -4.0283, -20.8130, 43.3472, 7.6416, -7.3023, -4.7782, 4.5250, 4.2114, 1.7700, -3.8452, -20.9229, 42.9321, 9.2285, -7.2826, -4.7788, 4.5376, 4.0894, 1.5869, -3.5400, -20.9229, 42.9321, 9.2285, -7.2754, -4.8261, 4.5723, 3.2959, 1.7090, -3.0518, -20.9229, 42.9321, 9.2285, -7.2969, -4.8333, 4.6088, 2.6245, 1.8311, -2.9907, -20.9229, 42.9321, 9.2285, -7.3209, -4.8064, 4.6118, 2.0142, 1.7700, -2.6245, -20.8984, 43.5425, 10.1074, -7.2951, -4.7633, 4.6424, 0.9155, 1.9531, -2.3193, -20.8984, 43.5425, 10.1074, -7.2784, -4.7561, 4.5981, 0.3662, 1.8311, -1.6479, -20.8984, 43.5425, 10.1074, -7.2592, -4.6920, 4.5993, 0.1221, 1.7090, -1.2207, -20.6909, 42.9077, 9.7900, -7.2586, -4.6968, 4.6591, -0.7324, 1.6479, -0.4272, -20.6909, 42.9077, 9.7900, -7.2927, -4.7082, 4.6501, -1.2207, 1.3428, 0.0000, -20.6909, 42.9077, 9.7900, -7.3017, -4.7148, 4.6819, -1.4038, 0.7935, 0.4272, -20.7275, 43.0542, 10.2783, -7.3143, -4.7184, 4.6872, -1.4038, 0.6714, 0.7324, -20.7275, 43.0542, 10.2783, -7.2844, -4.7016, 4.7040, -2.0142, 0.7324, 0.7935, -20.7275, 43.0542, 10.2783, -7.3017, -4.6902, 4.6651, -2.5635, 0.6714, 1.0376, -21.2158, 42.8711, 9.2651, -7.2844, -4.6795, 4.6603, -2.5635, 0.2441, 1.5869, -21.2158, 42.8711, 9.2651, -7.2957, -4.6543, 4.6400, -2.7466, -0.0610, 2.1362, -21.2158, 42.8711, 9.2651, -7.3514, -4.6555, 4.6681, -2.9297, -0.3662, 2.3193, -20.9473, 43.2007, 9.7534, -7.3550, -4.6849, 4.5759, -2.9907, -0.4272, 2.4414, -20.9473, 43.2007, 9.7534, -7.3490, -4.6304, 4.5059, -2.4414, -0.7935, 2.8076, -20.9473, 43.2007, 9.7534, -7.3879, -4.6088, 4.4724, -2.1362, -1.7090, 3.0518, -20.9473, 43.2007, 9.7534, -7.4077, -4.6184, 4.4472, -1.7090, -2.3193, 3.1738, -20.7153, 42.9199, 9.6558, -7.4382, -4.6298, 4.3898, -1.7090, -2.5024, 2.9907, -20.7153, 42.9199, 9.6558, -7.4747, -4.6406, 4.3580, -1.7090, -2.3804, 2.6245, -20.7153, 42.9199, 9.6558, -7.5256, -4.6142, 4.3185, -1.9531, -2.3804, 2.2583, -20.6421, 43.3960, 8.8379, -7.5812, -4.5981, 4.2862, -2.3193, -1.8921, 1.8921, -20.6421, 43.3960, 8.8379, -7.5896, -4.6112, 4.2964, -2.5024, -1.5259, 1.4648, -20.6421, 43.3960, 8.8379, -7.5316, -4.6202, 4.3066, -2.0142, -0.9155, 1.0986, -20.2271, 43.2983, 9.2773, -7.5202, -4.6292, 4.3437, -2.0752, -0.5493, 0.8545, -20.2271, 43.2983, 9.2773, -7.4962, -4.6495, 4.3640, -2.2583, -0.1221, 0.5493, -20.2271, 43.2983, 9.2773, -7.4651, -4.6334, 4.3515, -2.1973, -0.1221, 0.2441, -20.8252, 43.0176, 9.3506, -7.4059, -4.5897, 4.3993, -2.3193, -0.3662, 0.1221, -20.8252, 43.0176, 9.3506, -7.3670, -4.6298, 4.3437, -1.9531, -0.0610, -0.3662, -20.8252, 43.0176, 9.3506, -7.3694, -4.6352, 4.3808, -1.3428, -0.3052, -0.5493, -20.8252, 43.0176, 9.3506, -7.4412, -4.6585, 4.4203, -0.6714, -0.6714, -0.7935, -20.2148, 43.3228, 8.9111, -7.5094, -4.6513, 4.4281, 0.3052, -0.1831, -0.9155, -20.2148, 43.3228, 8.9111, -7.4591, -4.6196, 4.4047, 0.4883, -0.3052, -0.9766, -20.2148, 43.3228, 8.9111, -7.4005, -4.5789, 4.4694, 0.6714, 0.0000, -1.4038, -20.9595, 43.0542, 7.2998, -7.4095, -4.6262, 4.4562, 0.7935, 0.2441, -1.6479, -20.9595, 43.0542, 7.2998, -7.4059, -4.6729, 4.5173, 0.1831, 0.1221, -1.7700, -20.9595, 43.0542, 7.2998, -7.4268, -4.6932, 4.5663, -0.9766, -0.1221, -1.5259, -21.4233, 43.2251, 9.2651, -7.4328, -4.7082, 4.4963, -2.3193, -0.4883, -1.3428, -21.4233, 43.2251, 9.2651, -7.3885, -4.6926, 4.5490, -2.7466, -1.4648, -0.8545, -21.4233, 43.2251, 9.2651, -7.3592, -4.6591, 4.5047, -3.1738, -1.7700, -0.1831, -20.6787, 43.1519, 8.8013, -7.3095, -4.6352, 4.5011, -3.7842, -2.0752, 0.1831, -20.6787, 43.1519, 8.8013, -7.2538, -4.5610, 4.6753, -3.7231, -2.8687, 1.2817, -20.6787, 43.1519, 8.8013, -7.2850, -4.5795, 4.7357, -2.5024, -3.5400, 1.7700, -20.9717, 43.3594, 8.7891, -7.3298, -4.5855, 4.7663, -1.2817, -3.9673, 2.5024, -20.9717, 43.3594, 8.7891, -7.3670, -4.6214, 4.7800, -1.3428, -3.9063, 2.6245, -20.9717, 43.3594, 8.7891, -7.3658, -4.6136, 4.7764, -1.9531, -4.0894, 2.7466, -20.9717, 43.3594, 8.7891, -7.3801, -4.6651, 4.7016, -1.5869, -3.7231, 2.9297, -21.2524, 42.9077, 8.0078, -7.3801, -4.6717, 4.7297, -2.5024, -3.5400, 3.4790, -21.2524, 42.9077, 8.0078, -7.4184, -4.6890, 4.7303, -3.4790, -3.0518, 3.9063, -21.2524, 42.9077, 8.0078, -7.4136, -4.6992, 4.6513, -4.5166, -3.0518, 4.5776, -20.9595, 43.3594, 8.7036, -7.2179, -4.6244, 4.6633, -5.9204, -3.3569, 5.3101, -20.9595, 43.3594, 8.7036, -7.3765, -4.6501, 4.6154, -6.0425, -3.2349, 5.9204, -20.9595, 43.3594, 8.7036, -7.4274, -4.6226, 4.5981, -6.6528, -3.1128, 6.7749, -20.4346, 43.5425, 9.7412, -7.4484, -4.5723, 4.5274, -6.7749, -3.2349, 6.8359, -20.4346, 43.5425, 9.7412, -7.4316, -4.5322, 4.5191, -6.6528, -2.9297, 7.2632, -20.4346, 43.5425, 9.7412, -7.4561, -4.4903, 4.5041, -5.6152, -2.1973, 7.3242, -20.7397, 44.5313, 7.6416, -7.5220, -4.4855, 4.4676, -4.0894, -1.7700, 7.0190, -20.7397, 44.5313, 7.6416, -7.5753, -4.4831, 4.6106, -3.9673, -1.7700, 7.5684, -20.7397, 44.5313, 7.6416, -7.6076, -4.4909, 4.5987, -3.6011, -0.8545, 6.8359, -20.5444, 44.4214, 7.2021, -7.4591, -4.4508, 4.6813, -2.6855, -0.3052, 6.8970, -20.5444, 44.4214, 7.2021, -7.3562, -4.5334, 4.6513, -2.6855, 0.1221, 6.8359, -20.5444, 44.4214, 7.2021, -7.2927, -4.6765, 4.5885, -3.1738, 0.7935, 7.5073, -20.5444, 44.4214, 7.2021, -7.3053, -4.7106, 4.6543, -4.0283, 0.6104, 8.6060, -20.7642, 44.8730, 8.3740, -7.3041, -4.7028, 4.6525, -5.1270, 0.8545, 9.2773, -20.7642, 44.8730, 8.3740
};

/**
 * @brief      Copy raw feature data in out_ptr
 *             Function called by inference library
 *
 * @param[in]  offset   The offset
 * @param[in]  length   The length
 * @param      out_ptr  The out pointer
 *
 * @return     0
 */
int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
  memcpy(out_ptr, features + offset, length * sizeof(float));
  return 0;
}

void print_inference_result(ei_impulse_result_t result);

/**
 * @brief      Arduino setup function
 */
void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  // comment out the below line to cancel the wait for USB connection (needed for native USB)
  while (!Serial);

  if (!IMU.begin()) {
    Serial.println("IMU init failed!");
    while (1);
  }

  // Initialize the buzzer pin to the output mode
  pinMode(BUZZER_PIN, OUTPUT);

  Serial.println("Edge Impulse IMU-based pose detection\n");
}

/**
 * @brief      Arduino main function
 */
void loop() {
  //ei_printf("Edge Impulse standalone inferencing (Arduino)\n");

  // Remind users that it is start to collect data
  ei_printf("Starting data collection...\n");
  // Record the start time of data collection
  unsigned long start_time = millis();


  // Continuously read data (9 dimensions per frame) to fill the features array
  // the number of data: 9*62.5*2 = 1125
  for (int i = 0; i < 125; i++) {
    float ax, ay, az;
    float gx, gy, gz;
    float mx, my, mz;
    /*
    if (IMU.accelerationAvailable() && IMU.gyroscopeAvailable() && IMU.magneticFieldAvailable()) {
      IMU.readAcceleration(ax, ay, az);
      IMU.readGyroscope(gx, gy, gz);
      IMU.readMagneticField(mx, my, mz);

      features[i * 9 + 0] = ax;
      features[i * 9 + 1] = ay;
      features[i * 9 + 2] = az;
      features[i * 9 + 3] = gx;
      features[i * 9 + 4] = gy;
      features[i * 9 + 5] = gz;
      features[i * 9 + 6] = mx;
      features[i * 9 + 7] = my;
      features[i * 9 + 8] = mz;

      delay(1000 / EI_CLASSIFIER_FREQUENCY); 

    }*/
    // Make sure that all sensor data is ready
    while (!IMU.accelerationAvailable() || !IMU.gyroscopeAvailable() || !IMU.magneticFieldAvailable()) {
      delay(1); 
    }

    // read data from sensors
    IMU.readAcceleration(ax, ay, az);
    IMU.readGyroscope(gx, gy, gz);
    IMU.readMagneticField(mx, my, mz);

    // store data into the array
    features[i * 9 + 0] = ax;
    features[i * 9 + 1] = ay;
    features[i * 9 + 2] = az;
    features[i * 9 + 3] = gx;
    features[i * 9 + 4] = gy;
    features[i * 9 + 5] = gz;
    features[i * 9 + 6] = mx;
    features[i * 9 + 7] = my;
    features[i * 9 + 8] = mz;

    delay(1000 / EI_CLASSIFIER_FREQUENCY);  // Ensure that the sampling frequency is 62.5Hz
  }

  // Remind users that the data collection is completed
  ei_printf("Data collection complete.\n");
  // Record the time when the data collection ends
  unsigned long end_time = millis();
  // Calculate the time spent on data collection
  unsigned long collection_time = end_time - start_time;
  ei_printf("Data collection took %lu milliseconds.\n", collection_time);

  if (sizeof(features) / sizeof(float) != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
    ei_printf("The size of your 'features' array is not correct. Expected %lu items, but had %lu\n",
              EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(features) / sizeof(float));
    delay(1000);
    return;
  }

  ei_impulse_result_t result = { 0 };

  // the features are stored into flash, and we don't want to load everything into RAM
  signal_t features_signal;
  features_signal.total_length = sizeof(features) / sizeof(features[0]);
  features_signal.get_data = &raw_feature_get_data;

  // invoke the impulse
  EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false /* debug */);
  if (res != EI_IMPULSE_OK) {
    ei_printf("ERR: Failed to run classifier (%d)\n", res);
    return;
  }

  // print inference return code
  //ei_printf("run_classifier returned: %d\r\n", res);
  print_inference_result(result);

  // Detect whether there is a fall
  if (result.classification[0].value > result.classification[1].value) {
    // If a fall occurs, the buzzer sounds for 3 seconds
    ei_printf("Fall detected! Activating buzzer for 3 seconds.\n");
    tone(BUZZER_PIN, 500);
    delay(3000);
    noTone(BUZZER_PIN);

    } else {
      // If you stand, do not react
      ei_printf("No fall detected. No action taken.\n");
      }

// Remind users that the inference is completed
  ei_printf("Inference complete. Waiting for next cycle...\n");

  delay(5000);// Make a complete posture judgment every five seconds
}

void print_inference_result(ei_impulse_result_t result) {

  ei_printf("Predictions:\r\n");
  for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
    ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
    ei_printf("%.5f\r\n", result.classification[i].value);
  }
}